/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from "./routes/__root";
import { Route as RegisterRouteImport } from "./routes/register";
import { Route as LoginRouteImport } from "./routes/login";
import { Route as HomepageRouteImport } from "./routes/homepage";
import { Route as IndexRouteImport } from "./routes/index";
import { Route as UIndexRouteImport } from "./routes/u/index";
import { Route as RequestHelpIndexRouteImport } from "./routes/request-help/index";
import { Route as OfferHelpIndexRouteImport } from "./routes/offer-help/index";
import { Route as MIndexRouteImport } from "./routes/m/index";
import { Route as UUserIdRouteImport } from "./routes/u/$userId";
import { Route as RequestHelpRequestHelpIdRouteImport } from "./routes/request-help/$requestHelpId";
import { Route as OfferHelpOfferHelpIdRouteImport } from "./routes/offer-help/$offerHelpId";
import { Route as MMessageIdRouteImport } from "./routes/m/$messageId";

const RegisterRoute = RegisterRouteImport.update({
  id: "/register",
  path: "/register",
  getParentRoute: () => rootRouteImport,
} as any);
const LoginRoute = LoginRouteImport.update({
  id: "/login",
  path: "/login",
  getParentRoute: () => rootRouteImport,
} as any);
const HomepageRoute = HomepageRouteImport.update({
  id: "/homepage",
  path: "/homepage",
  getParentRoute: () => rootRouteImport,
} as any);
const IndexRoute = IndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRouteImport,
} as any);
const UIndexRoute = UIndexRouteImport.update({
  id: "/u/",
  path: "/u/",
  getParentRoute: () => rootRouteImport,
} as any);
const RequestHelpIndexRoute = RequestHelpIndexRouteImport.update({
  id: "/request-help/",
  path: "/request-help/",
  getParentRoute: () => rootRouteImport,
} as any);
const OfferHelpIndexRoute = OfferHelpIndexRouteImport.update({
  id: "/offer-help/",
  path: "/offer-help/",
  getParentRoute: () => rootRouteImport,
} as any);
const MIndexRoute = MIndexRouteImport.update({
  id: "/m/",
  path: "/m/",
  getParentRoute: () => rootRouteImport,
} as any);
const UUserIdRoute = UUserIdRouteImport.update({
  id: "/u/$userId",
  path: "/u/$userId",
  getParentRoute: () => rootRouteImport,
} as any);
const RequestHelpRequestHelpIdRoute =
  RequestHelpRequestHelpIdRouteImport.update({
    id: "/request-help/$requestHelpId",
    path: "/request-help/$requestHelpId",
    getParentRoute: () => rootRouteImport,
  } as any);
const OfferHelpOfferHelpIdRoute = OfferHelpOfferHelpIdRouteImport.update({
  id: "/offer-help/$offerHelpId",
  path: "/offer-help/$offerHelpId",
  getParentRoute: () => rootRouteImport,
} as any);
const MMessageIdRoute = MMessageIdRouteImport.update({
  id: "/m/$messageId",
  path: "/m/$messageId",
  getParentRoute: () => rootRouteImport,
} as any);

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute;
  "/homepage": typeof HomepageRoute;
  "/login": typeof LoginRoute;
  "/register": typeof RegisterRoute;
  "/m/$messageId": typeof MMessageIdRoute;
  "/offer-help/$offerHelpId": typeof OfferHelpOfferHelpIdRoute;
  "/request-help/$requestHelpId": typeof RequestHelpRequestHelpIdRoute;
  "/u/$userId": typeof UUserIdRoute;
  "/m": typeof MIndexRoute;
  "/offer-help": typeof OfferHelpIndexRoute;
  "/request-help": typeof RequestHelpIndexRoute;
  "/u": typeof UIndexRoute;
}
export interface FileRoutesByTo {
  "/": typeof IndexRoute;
  "/homepage": typeof HomepageRoute;
  "/login": typeof LoginRoute;
  "/register": typeof RegisterRoute;
  "/m/$messageId": typeof MMessageIdRoute;
  "/offer-help/$offerHelpId": typeof OfferHelpOfferHelpIdRoute;
  "/request-help/$requestHelpId": typeof RequestHelpRequestHelpIdRoute;
  "/u/$userId": typeof UUserIdRoute;
  "/m": typeof MIndexRoute;
  "/offer-help": typeof OfferHelpIndexRoute;
  "/request-help": typeof RequestHelpIndexRoute;
  "/u": typeof UIndexRoute;
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport;
  "/": typeof IndexRoute;
  "/homepage": typeof HomepageRoute;
  "/login": typeof LoginRoute;
  "/register": typeof RegisterRoute;
  "/m/$messageId": typeof MMessageIdRoute;
  "/offer-help/$offerHelpId": typeof OfferHelpOfferHelpIdRoute;
  "/request-help/$requestHelpId": typeof RequestHelpRequestHelpIdRoute;
  "/u/$userId": typeof UUserIdRoute;
  "/m/": typeof MIndexRoute;
  "/offer-help/": typeof OfferHelpIndexRoute;
  "/request-help/": typeof RequestHelpIndexRoute;
  "/u/": typeof UIndexRoute;
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | "/"
    | "/homepage"
    | "/login"
    | "/register"
    | "/m/$messageId"
    | "/offer-help/$offerHelpId"
    | "/request-help/$requestHelpId"
    | "/u/$userId"
    | "/m"
    | "/offer-help"
    | "/request-help"
    | "/u";
  fileRoutesByTo: FileRoutesByTo;
  to:
    | "/"
    | "/homepage"
    | "/login"
    | "/register"
    | "/m/$messageId"
    | "/offer-help/$offerHelpId"
    | "/request-help/$requestHelpId"
    | "/u/$userId"
    | "/m"
    | "/offer-help"
    | "/request-help"
    | "/u";
  id:
    | "__root__"
    | "/"
    | "/homepage"
    | "/login"
    | "/register"
    | "/m/$messageId"
    | "/offer-help/$offerHelpId"
    | "/request-help/$requestHelpId"
    | "/u/$userId"
    | "/m/"
    | "/offer-help/"
    | "/request-help/"
    | "/u/";
  fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  HomepageRoute: typeof HomepageRoute;
  LoginRoute: typeof LoginRoute;
  RegisterRoute: typeof RegisterRoute;
  MMessageIdRoute: typeof MMessageIdRoute;
  OfferHelpOfferHelpIdRoute: typeof OfferHelpOfferHelpIdRoute;
  RequestHelpRequestHelpIdRoute: typeof RequestHelpRequestHelpIdRoute;
  UUserIdRoute: typeof UUserIdRoute;
  MIndexRoute: typeof MIndexRoute;
  OfferHelpIndexRoute: typeof OfferHelpIndexRoute;
  RequestHelpIndexRoute: typeof RequestHelpIndexRoute;
  UIndexRoute: typeof UIndexRoute;
}

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/register": {
      id: "/register";
      path: "/register";
      fullPath: "/register";
      preLoaderRoute: typeof RegisterRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/login": {
      id: "/login";
      path: "/login";
      fullPath: "/login";
      preLoaderRoute: typeof LoginRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/homepage": {
      id: "/homepage";
      path: "/homepage";
      fullPath: "/homepage";
      preLoaderRoute: typeof HomepageRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/u/": {
      id: "/u/";
      path: "/u";
      fullPath: "/u";
      preLoaderRoute: typeof UIndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/request-help/": {
      id: "/request-help/";
      path: "/request-help";
      fullPath: "/request-help";
      preLoaderRoute: typeof RequestHelpIndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/offer-help/": {
      id: "/offer-help/";
      path: "/offer-help";
      fullPath: "/offer-help";
      preLoaderRoute: typeof OfferHelpIndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/m/": {
      id: "/m/";
      path: "/m";
      fullPath: "/m";
      preLoaderRoute: typeof MIndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/u/$userId": {
      id: "/u/$userId";
      path: "/u/$userId";
      fullPath: "/u/$userId";
      preLoaderRoute: typeof UUserIdRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/request-help/$requestHelpId": {
      id: "/request-help/$requestHelpId";
      path: "/request-help/$requestHelpId";
      fullPath: "/request-help/$requestHelpId";
      preLoaderRoute: typeof RequestHelpRequestHelpIdRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/offer-help/$offerHelpId": {
      id: "/offer-help/$offerHelpId";
      path: "/offer-help/$offerHelpId";
      fullPath: "/offer-help/$offerHelpId";
      preLoaderRoute: typeof OfferHelpOfferHelpIdRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/m/$messageId": {
      id: "/m/$messageId";
      path: "/m/$messageId";
      fullPath: "/m/$messageId";
      preLoaderRoute: typeof MMessageIdRouteImport;
      parentRoute: typeof rootRouteImport;
    };
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  HomepageRoute: HomepageRoute,
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRoute,
  MMessageIdRoute: MMessageIdRoute,
  OfferHelpOfferHelpIdRoute: OfferHelpOfferHelpIdRoute,
  RequestHelpRequestHelpIdRoute: RequestHelpRequestHelpIdRoute,
  UUserIdRoute: UUserIdRoute,
  MIndexRoute: MIndexRoute,
  OfferHelpIndexRoute: OfferHelpIndexRoute,
  RequestHelpIndexRoute: RequestHelpIndexRoute,
  UIndexRoute: UIndexRoute,
};
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();
